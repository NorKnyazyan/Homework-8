Task 1
// Book Library
// Build a simple book library application where users can add, view, and remove books.
// 1. Create
// 2. Create
// a. b. c. d.
// a Book class with properties like title, author, isbn, and status (read/unread). a Library class that holds an array of books. Add methods to:
// Add a new book.
// Remove a book by ISBN.c
// Display all books.
// Filter books by read/unread status.

class Book {
    constructor (title, author, isbn, status) {
        this.title = title;
        this.author = author;
        this.isbn = isbn;
        this.status = status;
    }
}

class Library {
    constructor() {
        this.books = [];
    }

    add(...books) {
        this.books.push(...books);
    }

    remove(isbn) {
        this.books = this.books.filter(book => book.isbn !== isbn);
    }

    display() {
        if (this.books.length === 0) {
            console.log("The library is empty.");
        } else {
            this.books.forEach(book => {
                return `Title: ${book.title}, Author: ${book.author}, ISBN: ${book.isbn}, Status: ${book.status}`;
            });
        }
    }

    filterStatus(status) {
        return this.books.filter(book => book.status === status);
    }
}

const gatsby = new Book('Great Gatsby', 'Fithzerald', '12545678', 'read')
const crimeAndPunishmen = new Book('Crime and Punishment','Fedor Dostoevsky','1239815r8', 'unread' )
const darkTower = new Book('Dark Tower', 'Steven King', '123-90951', 'read')
const talesOfSharky = new Book('Tales of Captain Sharky', 'Arthur Conan Doyle', '1986109', 'unread')

let library = new Library()


Task 2
// To-Do List
// Build a to-do list application where users can add, mark as complete, and remove tasks.
// Create a Task class with properties like description, dueDate, and isComplete.
// Create a TaskList class that manages an array of tasks. Add methods to:
// a. Add a new task.
// b. Mark a task as complete.
// c. Remove a task.
// d. Display all tasks with filtering options (e.g., all tasks, only completed, only
// incomplete).

class Task {
    constructor(description, dueDate, isComplete = false) {
        this.description = description;
        this.dueDate = dueDate;
        this.isComplete = isComplete;
    }
}


class TaskList {
    constructor(...tasks) {
        this.tasks = [];
    }

    add(...tasks) {
        this.tasks.push(...tasks);
    }

    markAsComplete(description) {
        let task = this.tasks.find(task => task.description === description);
        if (task) {
            task.isComplete = true;
        }
    }

    removeCompletedTasks() {
        this.tasks = this.tasks.filter(task => !task.isComplete);
    }

    display() {
        this.tasks.forEach(task => {
            console.log(`Task: ${task.description}, Due Date: ${task.dueDate}, Completed: ${task.isComplete}`);
        });
    }
}


Task 3
// Student Management System
// Build a student management system where users can manage student information.
// 1. Create a base Person class with properties like name, age, and id
// 2. Extend the Person class to create Student, Teacher, and Administrator classes.
// 3. Each subclass might have specific properties like grade for Student, subject for Teacher,
// and department for Administrator.
// 4. Create a Classroom class that holds an array of students. Add methods to:
// a. Add a new student.
// b. Remove a student by ID.
// c. Update student information.
// d. Display all students or filter by grade. e. Add teacher
// f. Remove Teacher
// g. Update Teacher information
// h. Add Administrator
// i. Remove Administrator
// j. Update Administrator information

class Person {
    constructor(name, age, id) {
        this.name = name;
        this.age = age;
        this.id = id;
    }
}

class Student extends Person {
    constructor(name, age, id, grade) {
        super(name, age, id);
        this.grade = grade;
    }
}

class Teacher extends Person {
    constructor(name, age, id, subject) {
        super(name, age, id);
        this.subject = subject;
    }
}

class Administrator extends Person {
    constructor(name, age, id, department) {
        super(name, age, id);
        this.department = department;
    }
}

class Classroom {
    constructor() {
        this.students = [];
    }

    addStudent(student) {
        this.students.push(student);
    }

    removeStudentById(id) {
        this.students = this.students.filter(student => student.id !== id);
    }

    updateStudentInfo(id, newInfo) {
        const student = this.students.find(student => student.id === id);
        if (student) {
            Object.assign(student, newInfo);
        }
    }

    displayStudents(grade) {
        this.students .filter(student => !grade || student.grade === grade).forEach(student => 
                console.log(`Name: ${student.name}, Age: ${student.age}, ID: ${student.id}, Grade: ${student.grade}`)
            );
    }

    addTeacher(teacher) {
        this.teachers.push(teacher);
    }

    removeTeacherById(id) {
        this.teachers = this.teachers.filter(teacher => teacher.id !== id);
    }

    updateTeacherInfo(id, newInfo) {
        const teacher = this.teachers.find(teacher => teacher.id === id);
        if (teacher) Object.assign(teacher, newInfo);
    }

    addAdministrator(administrator) {
        this.administrators.push(administrator);
    }

    removeAdministratorById(id) {
        this.administrators = this.administrators.filter(administrator => administrator.id !== id);
    }

    updateAdministratorInfo(id, newInfo) {
        const administrator = this.administrators.find(administrator => administrator.id === id);
        if (administrator) Object.assign(administrator, newInfo);
    }
}
